/**
 * @file rodCutting.cpp
 * @author your name (you@domain.com)
 * @brief 
 * @version 0.1
 * @date 2023-11-06
 * 
 * @copyright Copyright (c) 2023
 * 
 */

/**
 * Problem statement :- We are given a rod of size ‘N’. It can be cut into pieces. Each length of a piece has 
 *                      a particular price given by the price array. Our task is to find the maximum revenue 
 *                      that can be generated by selling the rod after cutting( if required) into pieces.
 * 
 */

#include<bits/stdc++.h>
using namespace std;
class DP{
    private:
    int memoisation(int cutLen,int rodLen,int n,vector<int>&price,vector<vector<int>>&dp){
        if(cutLen > n)return -1e9;
        if(rodLen == 0)return 0;
        if(dp[cutLen][rodLen]!=-1)return dp[cutLen][rodLen];
        int ntake = memoisation(cutLen+1,rodLen,n,price,dp);
        int take=-1e9;
        if(cutLen<=rodLen){
            take  = price[cutLen-1]+memoisation(cutLen,rodLen-cutLen,n,price,dp);
        }
        return dp[cutLen][rodLen]=max(take,ntake);
    }
    public:
    int recursionSolution(int cutLen,int rodLen,int n,vector<int>&price){
        if(cutLen > n)return -1e9;
        if(rodLen == 0)return 0;
        int ntake = recursionSolution(cutLen+1,rodLen,n,price);
        int take = -1e9;
        if(cutLen <= rodLen){
            take = price[cutLen-1]+recursionSolution(cutLen,rodLen-cutLen,n,price);
        }
        return max(take,ntake);
    }
    int memoisationImplementation(int n,vector<int>&price){
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        return memoisation(1,n,n,price,dp);
    }
};
int main(){
int n;
cout<<"Enter the size of the rod/array "<<endl;
cin>>n;
vector<int>prices;
cout<<"Enter the prices "<<endl;
for(int i=0;i<n;i++){
    int x;
    cin>>x;
    prices.push_back(x);
}
DP obj;
cout<<"Recursion solution "<<obj.recursionSolution(1,n,n,prices)<<endl;
cout<<"Memoisation implementation "<<obj.memoisationImplementation(n,prices)<<endl;
return 0;
}